import * as ipfs from "ipfs";
/** Declaration file generated by dts-gen */

export as namespace orbit_db;
export = OrbitDB;


declare class OrbitDB {
    constructor(ipfs:ipfs, directory?: string, options?:any);

    counter(...args: any[]): void;

    create(...args: any[]): void;

    disconnect(...args: any[]): void;

    docs(...args: any[]): void;

    docstore(...args: any[]): void;

    eventlog(...args: any[]): void;

    feed(...args: any[]): void;

    keyvalue(...args: any[]): void;

    kvstore(...args: any[]): void;

    log(...args: any[]): void;

    open(...args: any[]): void;

    stop(...args: any[]): void;

    static addDatabaseType(...args: any[]): void;

    static databaseTypes: string[];

    static getDatabaseTypes(...args: any[]): void;

    static isValidType(...args: any[]): void;

}

declare namespace OrbitDB {
  // Mapping for 'database type' -> Class
  // type databaseTypes = {
  //   'counter': CounterStore,
  //   'eventlog': EventStore,
  //   'feed': FeedStore,
  //   'docstore': DocumentStore,
  //   'keyvalue': KeyValueStore,
  // }
    // namespace prototype {
    //     function counter(...args: any[]): void;
    //
    //     function create(...args: any[]): void;
    //
    //     function disconnect(...args: any[]): void;
    //
    //     function docs(...args: any[]): void;
    //
    //     function docstore(...args: any[]): void;
    //
    //     function eventlog(...args: any[]): void;
    //
    //     function feed(...args: any[]): void;
    //
    //     function keyvalue(...args: any[]): void;
    //
    //     function kvstore(...args: any[]): void;
    //
    //     function log(...args: any[]): void;
    //
    //     function open(...args: any[]): void;
    //
    //     function stop(...args: any[]): void;
    //
    // }

}
